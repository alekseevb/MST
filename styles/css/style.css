@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  min-height: 100%;
  /**
     Унифицированный интерлиньяж
    */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not([fill=none], [fill^=url])) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not([stroke=none], [stroke^=url])) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
:root {
  --color-dark: #222;
  --color-gray: #282829;
  --color-green: #38535d;
  --color-light: #fff;
  --color-border: #d5c9be;
  --border: 2px solid var(--color-border);
  --border-radius: 4px;
  --border-radius-large: 30px;
  --font-family-accent: "Prata", arial;
  --container-width: 1597px;
  --container-padding-x: 20px;
  --container-padding-y: 100px;
  --input-height: 65px;
  --button-height: 78px;
  --transition-duration: 0.2s;
}

@font-face {
  font-family: "Prata";
  src: url("../../fonts/Prata-Regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  -webkit-clip-path: inset(100%) !important;
          clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@media (max-width: 767px) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (min-width: 768px) {
  .visible-mobile {
    display: none !important;
  }
}

body {
  font-size: clamp(18px, 1.25vw, 24px);
  font-family: Arial, sans-serif;
  font-weight: 400;
  line-height: 1.4;
  color: var(--color-light);
  background-color: var(--color-gray);
}

a,
button,
input,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
  color: inherit;
}

h1,
h2,
h3,
h4 {
  font-weight: 400;
}

h1 {
  font-size: clamp(40px, 4.1666666667vw, 80px);
}

h2 {
  font-size: clamp(36px, 2.8125vw, 54px);
}

h3 {
  font-size: clamp(26px, 1.5625vw, 30px);
}

.header {
  background-color: var(--color-dark);
  padding-top: 30px;
}
.header__inner {
  display: flex;
  align-items: center;
  -moz-column-gap: 205px;
       column-gap: 205px;
}
@media (max-width: 1023px) {
  .header__inner {
    justify-content: space-between;
    -moz-column-gap: 100px;
         column-gap: 100px;
  }
}
.header__menu-list {
  display: flex;
  align-items: center;
  align-self: start;
  -moz-column-gap: 29px;
       column-gap: 29px;
}
.header__menu-link {
  font-size: 16px;
  font-style: italic;
  display: inline-flex;
  align-items: center;
  height: 58px;
  text-transform: uppercase;
}

.burger-button {
  padding: 0;
  background-color: transparent;
  border: none;
  width: 48px;
  aspect-ratio: 1;
  position: relative;
}
.burger-button::after {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  content: "";
  width: 50%;
  height: 2px;
  background-color: var(--color-light);
  box-shadow: 0 -8px white, 0 8px white;
}

.mobile-overlay {
  width: 100%;
  height: 100%;
  margin: 0;
  border: none;
  padding: 30px 20px;
  background-color: var(--color-dark);
}
.mobile-overlay:modal {
  max-width: 100%;
  max-height: 100%;
}
.mobile-overlay__close-button-wrapper {
  display: flex;
  justify-content: end;
}
.mobile-overlay__list {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  min-height: 80vh;
  row-gap: 40px;
  color: var(--color-light);
}

.cross-button {
  padding: 0;
  background-color: transparent;
  border: none;
  width: 48px;
  aspect-ratio: 1;
  position: relative;
  border-radius: var(--border-radius);
}
.cross-button::before, .cross-button::after {
  content: "";
  position: absolute;
  top: 50%;
  translate: -50%;
  width: 70%;
  height: 2px;
  background-color: var(--color-light);
}
.cross-button::before {
  rotate: 45deg;
}
.cross-button::after {
  rotate: -45deg;
}